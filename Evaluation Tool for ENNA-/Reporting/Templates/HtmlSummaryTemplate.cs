// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 15.0.0.0
//  
//     Änderungen an dieser Datei können fehlerhaftes Verhalten verursachen und gehen verloren, wenn
//     der Code neu generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Evaluation_Tool_for_ENNA_.Reporting.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Evaluation_Tool_for_ENNA_.Reporting;
    using Evaluation_Tool_for_ENNA_.Enums;
    using System;


    /// <summary>
    /// Class to produce the template output
    /// </summary>

#line 1 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class HtmlSummaryTemplate : HtmlSummaryTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {

#line 9 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"

            List<Testing_final.DatabaseMethods.Occurances1> testresults = this.testresults.ToList();


#line default
#line hidden
            this.Write(@"<html>
<head>
<style>
table td + td { border-left:1px solid black; }
table th + th { border-left:1px solid black; }
th {border-bottom:1px solid black; padding-left: 5px; padding-right: 5px;}
td {padding-left: 5px; padding-right: 5px;}
table { border-collapse:collapse}
</style>
</head>

<body>
<h1>Summary Report</h1>

<t>Test Name: ");

#line 26 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TestName));

#line default
#line hidden
            this.Write(" </t>\r\n\r\n<h3>Overview</h3>\r\n<table>\r\n\t<tr>\r\n\t\t<th>Result</th>\r\n\t\t<th>Count</th>\r\n" +
                    "\t\t<th>Percentage</th>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>Passed</th>\r\n\t\t<td style=\"text-align" +
                    ":end;\">");

#line 37 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.passed_count));

#line default
#line hidden
            this.Write("</th>\r\n\t\t<td style=\"text-align:end;\">");

#line 38 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.passed_percentage));

#line default
#line hidden
            this.Write("</th>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>Failed</th>\r\n\t\t<td style=\"text-align:end;\">");

#line 42 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.failed_count));

#line default
#line hidden
            this.Write("</th>\r\n\t\t<td style=\"text-align:end;\">");

#line 43 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.failed_percentage));

#line default
#line hidden
            this.Write("</th>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>Open</th>\r\n\t\t<td style=\"text-align:end;\">");

#line 47 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.open_count));

#line default
#line hidden
            this.Write("</th>\r\n\t\t<td style=\"text-align:end;\">");

#line 48 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.open_percentage));

#line default
#line hidden
            this.Write("</th>\r\n\t</tr>\r\n\t<tr style=\"border-top:1px solid black; font-weight: bold\">\r\n\t\t<td" +
                    ">Total</th>\r\n\t\t<td style=\"text-align:end;\">");

#line 52 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.testcase_count));

#line default
#line hidden
            this.Write("</th>\r\n\t\t<td style=\"text-align:end;\">100%</th>\r\n\t</tr>\r\n\r\n</table>\r\n\r\n<h3>Testcas" +
                    "es</h3>\r\n\r\n<table>\r\n\t<tr>\r\n\t\t<th>Test Id</th>\r\n\t\t<th>Ecu</th>\r\n\t\t<th>Req Id</th>" +
                    "\r\n\t\t<th>Test Result</th>\t\r\n\t\t<th>Testcase Name</th>\t\t\t\r\n\t</tr>\r\n");

#line 68 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            for (int i = 0; i < testresults.Count(); i++)
            {
                var result = testresults[i].Result;
                if (i % 2 == 0)
                {

#line default
#line hidden
                    this.Write("\t\t<tr>\r\n");

#line 73 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
                }
                else
                {

#line default
#line hidden
                    this.Write("\t\t<tr style=\"background-color:lightgrey\">\r\n");

#line 76 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
                }

#line default
#line hidden
                this.Write("\t\t<td>");

#line 77 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(testresults[i].TCID));

#line default
#line hidden
                this.Write("</td>\r\n\t\t<td>");

#line 78 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(testresults[i].ECUNo));

#line default
#line hidden
                this.Write("</td>\r\n\t\t<td>");

#line 79 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(testresults[i].ReqID));

#line default
#line hidden
                this.Write("</td>\r\n\t\t<td style=\"text-align:center;font-weight: bold\"><span style=\"color:");

#line 80 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(result == Convert.ToString(Enums.TestcaseResults.Passed) ? "limegreen" : result == Convert.ToString(Enums.TestcaseResults.Failed) ? "red" : "black"));

#line default
#line hidden
                this.Write("\">");

#line 80 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(result));

#line default
#line hidden
                this.Write("</span></td>\r\n\t\t<td>");

#line 81 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(testresults[i].CaseName));

#line default
#line hidden
                this.Write("</td>\r\n\t</tr>\r\n");

#line 83 "C:\Diagnose_Audi\3_Tools_HCP3\TestEvaluationTool\Evaluation Tool for ENNA-\Reporting\Templates\HtmlSummaryTemplate.tt"
            }

#line default
#line hidden
            this.Write("\r\n\r\n</table>\r\n</body>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }

#line default
#line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class HtmlSummaryTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0)
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
